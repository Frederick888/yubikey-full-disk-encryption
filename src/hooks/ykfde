#!/usr/bin/ash

YKFDE_CONFIG_FILE="/etc/ykfde.conf"

run_hook() {
  local _tmp
  _tmp=""
  local cryptargs cryptopt cryptoptions

  [ "$DBG" ] && printf '%s\n' "$0:"

  [ "$DBG" ] && echo " > Reading YKFDE configuration file."
  . "$YKFDE_CONFIG_FILE" || {
    ykfde_err 001 "Failed to read the YKFDE configuration file '$YKFDE_CONFIG_FILE'"
    return 1
  }

  # if no settings in config, try to pull it from kernel cmdline (analog to encrypt hook)
  if [ -z "$YKFDE_DISK_UUID" ] || [ -z "$YKFDE_LUKS_NAME" ]; then
    # shellcheck disable=SC2154
    if [ "$cryptdevice" ]; then
      IFS=: read -r YKFDE_LUKS_DEV YKFDE_LUKS_NAME cryptoptions <<EOF
$cryptdevice
EOF
      for cryptopt in $(echo "$cryptoptions" | tr , ' '); do
        case "$cryptopt" in
          allow-discards)
            cryptargs="$cryptargs --allow-discards"
            ;;
          *)
            ykfde_err 002 "Encryption option '$cryptopt' not known, ignoring."
            ;;
        esac
      done
      YKFDE_LUKS_OPTIONS="$cryptargs"
      YKFDE_LUKS_DEV="$(resolve_device "$YKFDE_LUKS_DEV")"
    else
      ykfde_err 003 "'$YKFDE_CONFIG_FILE' Please provide YKFDE_DISK_UUID /and/ YKFDE_LUKS_NAME or set cryptdevice kernel parameter."
      return 1
    fi
  fi

  # set default values:
  [ -z "$YKFDE_LUKS_DEV" ] && YKFDE_LUKS_DEV="/dev/disk/by-uuid/$YKFDE_DISK_UUID"
  [ -z "$YKFDE_CHALLENGE_YUBIKEY_INSERT_TIMEOUT" ] && YKFDE_CHALLENGE_YUBIKEY_INSERT_TIMEOUT="30"
  [ -z "$YKFDE_CRYPTSETUP_TRIALS" ] && YKFDE_CRYPTSETUP_TRIALS="5"
  [ -z "$YKFDE_CHALLENGE_SLOT" ] && YKFDE_CHALLENGE_SLOT="2"

  # sanity checks:
  [ "$YKFDE_CRYPTSETUP_TRIALS" -lt 1 ] && YKFDE_CRYPTSETUP_TRIALS="5"
  [ "$YKFDE_CHALLENGE_SLOT" -lt 1 ] || [ "$YKFDE_CHALLENGE_SLOT" -gt 2 ] && YKFDE_CHALLENGE_SLOT="2"

  [ -e "$YKFDE_LUKS_DEV" ] || {
    ykfde_err 004 "YKFDE cannot find LUKS device '$YKFDE_LUKS_DEV'.\\nPlease check YKFDE_DISK_UUID ($YKFDE_DISK_UUID) and/or YKFDE_LUKS_DEV variable(s) in '$YKFDE_CONFIG_FILE'."
    return 1
  }

  [ "$DBG" ] && echo " > modprobing dm-crypt"
  _tmp="$(modprobe -a -q dm-crypt >/dev/null 2>&1)"

  local trial_nr
  trial_nr=1
  while [ "$trial_nr" -le "$YKFDE_CRYPTSETUP_TRIALS" ]; do
    printf '%s\n' "Attempt #$trial_nr/$YKFDE_CRYPTSETUP_TRIALS: cryptsetup of $YKFDE_LUKS_DEV"
    ykfde_do_it && return 0
    trial_nr=$((trial_nr + 1))
  done

  # if we get here, we did NOT succeed:
  ykfde_err 000 "$0 Failed!"
  return 1
}

ykfde_err() {
  local _rc
  _rc="$?"
  local code
  code="$1"
  local msg
  msg="$2"
  [ "$msg" ] && msg="ERROR $code [rc=$_rc]: $msg" || msg="ERROR $code [rc=$_rc]"
  printf '\n%s\n\n' "$msg" #exit 1;
}

# assemble passphrase and run 'cryptsetup luksOpen'
ykfde_do_it() {
  # key used to 'cryptsetup luksOpen'
  local _passphrase
  _passphrase=""
  local _tmp
  _tmp=""
  local _rc
  _rc=""

  # if we have a challenge
  [ "$YKFDE_CHALLENGE" ] || [ "$YKFDE_CHALLENGE_PASSWORD_NEEDED" ] && ykfde_challenge_response

  if [ -z "$_passphrase" ]; then
    if [ "$YKFDE_CHALLENGE" ] || [ "$YKFDE_CHALLENGE_PASSWORD_NEEDED" ]; then
      printf " > Challenge-Response failed.\\n   Falling back to manual passphrase.\\n"
      [ "$trial_nr" -le "$YKFDE_CRYPTSETUP_TRIALS" ] && echo "   Press ENTER to skip and retry Challenge-Response."
    else
      echo " > Passphrase needed to unlock disk."
    fi

    printf "   Enter passphrase: "
    # shellcheck disable=SC2169
    if [ "$DBG" ]; then read -r _passphrase; else read -r -s _passphrase; fi
    # if /NOT/ DBG, we need to output \n here.
    [ "$DBG" ] || echo
  fi

  [ "$DBG" ] && printf '%s\n' " > Passing '$_passphrase' to 'cryptsetup'"
  if [ "$RESUME" ]; then
    # shellcheck disable=SC2154
    [ "$DBG" ] && printf '%s\n' " > Decrypting with 'cryptsetup luksResume \"$cryptname\"'..." || echo " > Decrypting with 'cryptsetup'..."
    _tmp="$(printf %s "$_passphrase" | cryptsetup luksResume "$cryptname" 2>&1)"
  else
    [ "$DBG" ] && printf '%s\n' " > Decrypting with 'cryptsetup luksOpen \"$YKFDE_LUKS_DEV\" \"$YKFDE_LUKS_NAME\"'..." || echo " > Decrypting with 'cryptsetup'..."
    _tmp="$(printf %s "$_passphrase" | cryptsetup luksOpen "$YKFDE_LUKS_DEV" "$YKFDE_LUKS_NAME" "$YKFDE_LUKS_OPTIONS" 2>&1)"
  fi
  _rc=$?

  if [ "$_rc" -eq 0 ]; then
    echo "   Decryption was succesful."
    if [ "$YKFDE_SLEEP_AFTER_SUCCESSFUL_CRYPTSETUP" ] && [ "$YKFDE_SLEEP_AFTER_SUCCESSFUL_CRYPTSETUP" -gt 0 ]; then
      [ "$DBG" ] && printf '%s\n' " > Making $YKFDE_SLEEP_AFTER_SUCCESSFUL_CRYPTSETUP sleep."
      sleep "$YKFDE_SLEEP_AFTER_SUCCESSFUL_CRYPTSETUP"
    fi
  else
    printf '%s\n' "   FAILED! [$_rc] $_tmp"
  fi

  return "$_rc"
}

ykfde_challenge_response() {
  local _yubikey_timeout
  _yubikey_timeout="$YKFDE_CHALLENGE_YUBIKEY_INSERT_TIMEOUT"
  local _yubikey_timeout_str
  _yubikey_timeout_str=""
  local _yubikey_detected
  _yubikey_detected=""
  # to determine if a timeout occured
  local _starttime
  _starttime=""
  local _endtime
  _endtime=""
  local _usedtime
  _usedtime=""
  local _tmp
  _tmp=""
  local _rc
  _rc=""

  [ "$YKFDE_CHALLENGE_YUBIKEY_INSERT_TIMEOUT" -gt 0 ] && _yubikey_timeout_str="$YKFDE_CHALLENGE_YUBIKEY_INSERT_TIMEOUT seconds"

  _starttime="$(date +%s)"
  printf '%s\n' " > Waiting $_yubikey_timeout_str for YubiKey..."

  while [ -z "$_yubikey_detected" ]; do
    _endtime="$(date +%s)"
    _usedtime=$((_endtime - _starttime))
    [ "$DBG" ] && printf %s "   (used time:$_usedtime, timeout:$_yubikey_timeout) ykinfo -$YKFDE_CHALLENGE_SLOT: "
    _tmp="$(ykinfo -"$YKFDE_CHALLENGE_SLOT" 2>&1)"
    _rc=$?
    [ "$DBG" ] && printf '%s\n' "[$_rc] '$_tmp'"
    [ "$_rc" -eq 0 ] && _yubikey_detected=1
    if [ "$_yubikey_timeout" -eq -1 ] || [ "$_usedtime" -le "$_yubikey_timeout" ]; then
      sleep 0.5
    else
      echo "    Timeout - Challenge-Response aborted."
      # timeout
      return 1
    fi
  done

  if [ "$YKFDE_CHALLENGE_PASSWORD_NEEDED" ]; then
    local _pw
    _pw=""
    echo " > Please provide the challenge."
    while [ -z "$_pw" ]; do
      printf "   Enter challenge: "
      # shellcheck disable=SC2169
      if [ "$DBG" ]; then read -r _pw; else read -r -s _pw; fi
      _pw="$(printf %s "$_pw" | sha256sum | awk '{print $1}')"
    done
    # if /NOT/ DBG, we need to output \n here.
    [ "$DBG" ] || echo
    YKFDE_CHALLENGE="$_pw"
  fi

  echo "   Remember to touch the device if necessary."
  [ "$DBG" ] && printf '%s\n' "   Running: ykchalresp -$YKFDE_CHALLENGE_SLOT \"$YKFDE_CHALLENGE\"..."
  _passphrase="$(ykchalresp -"$YKFDE_CHALLENGE_SLOT" "$YKFDE_CHALLENGE" 2>/dev/null | tr -d '\n')"
  if [ -z "$_passphrase" ]; then
    printf "\\n   YubiKey did not provide a response - Initializing second attempt, touch the device if necessary.\\n"
    _passphrase="$(ykchalresp -"$YKFDE_CHALLENGE_SLOT" "$YKFDE_CHALLENGE" 2>/dev/null | tr -d '\n')"
  fi
  if [ -z "$_passphrase" ]; then
    printf "\\n   YubiKey did not provide a response - Initializing final attempt, touch the device if necessary.\\n"
    _passphrase="$(ykchalresp -"$YKFDE_CHALLENGE_SLOT" "$YKFDE_CHALLENGE" 2>/dev/null | tr -d '\n')"
  fi
  [ "$DBG" ] && printf '%s\n' "   Received response: '$_passphrase'"

  if [ "$_passphrase" ] && [ "$YKFDE_CHALLENGE_PASSWORD_NEEDED" ]; then
    _passphrase="$_pw$_passphrase"
  fi
}
